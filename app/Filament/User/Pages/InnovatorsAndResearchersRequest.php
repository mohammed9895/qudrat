<?php

namespace App\Filament\User\Pages;

use App\Enums\ExpertRequestStatus;
use App\Models\Category;
use App\Models\Profile;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\Select;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Pages\Page;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Concerns\InteractsWithTable;
use Filament\Tables\Contracts\HasTable;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Relations\HasMany;

class InnovatorsAndResearchersRequest extends Page implements HasForms, HasTable
{
    use InteractsWithForms, InteractsWithTable;

    protected static ?string $navigationIcon = 'heroicon-o-document-text';

    protected static string $view = 'filament.user.pages.innovators-and-researchers-request';

    protected static ?int $navigationSort = 20;

    public Profile $profile;

    public ?array $data = [];

    public static function getNavigationLabel(): string
    {
        return __('general.request-innovators-and-researchers-profile.title'); // TODO: Change the autogenerated stub
    }

    public function getTitle(): string
    {
        return __('general.request-innovators-and-researchers-profile.title'); // TODO: Change the autogenerated stub
    }

    public function mount()
    {
        $this->profile = auth()->user()->profile;
        // Initialize the form state if needed
        $this->form->fill();
    }

    public function table(Table $table): Table
    {
        return $table
            ->relationship(fn (): HasMany => $this->profile->innovatorsAndResearchersRequests())
            ->columns([
                // Define the columns for the table
                TextColumn::make('reason')
                    ->label(__('general.reason'))
                    ->formatStateUsing(fn ($state) => strip_tags($state, 50))
                    ->sortable()
                    ->searchable(),
                TextColumn::make('status')
                    ->label(__('general.status'))
                    ->badge()
                    ->sortable(),
                TextColumn::make('message')
                    ->label(__('general.message'))
                    ->searchable(),
                TextColumn::make('created_at')
                    ->label(__('general.created-at'))
                    ->dateTime()
                    ->sortable(),
            ])->headerActions([
                // Define any header actions for the table if needed
            ])
            ->filters([
                // Define any filters for the table if needed
            ])
            ->actions([
                // Define any actions for the table if needed
            ]);
    }

    public function form(Form $form): Form
    {
        return $form->schema([
            Select::make('category_id')->options(function () {
                return Category::whereIn('name->en', ['Innovator', 'Researcher'])
                    ->orWhereIn('name->ar', ['مبتكر', 'باحث'])
                    ->pluck('name', 'id')
                    ->toArray();
            })
                ->label(__('general.category'))
                ->required(),
            RichEditor::make('reason')
                ->label(__('general.request-innovators-and-researchers-profile.why'))
                ->required()
                ->columnSpanFull(),
            FileUpload::make('attachments')
                ->label(__('general.attachments'))
                ->directory('request-innovators-and-researchers')
                ->multiple()
                ->acceptedFileTypes(['image/*', 'application/pdf'])
                ->maxFiles(5)
                ->columnSpanFull(),
        ])->statePath('data');
    }

    public function submit()
    {

        // Logic to handle the expert profile request submission
        // For example, saving the request to the database
        $data = $this->form->getState();

        $request = auth()->user()->profile->innovatorsAndResearchersRequests()->create($data + [
            'status' => ExpertRequestStatus::Pending,
        ]);

        session()->flash('success', __('general.request-submitted-successfully'));

        Notification::make()
            ->title(__('general.request-submitted'))
            ->body(__('general.request-submitted-successfully'))
            ->success()
            ->send();

        $this->form->fill();
    }
}
