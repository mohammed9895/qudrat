<?php

namespace App\Filament\Admin\Resources;

use App\Enums\Status;
use App\Filament\Admin\Resources\ProfileResource\Pages;
use App\Models\Employer;
use App\Models\Profile;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Infolists\Components\ImageEntry;
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Resource;
use Filament\Support\Enums\FontWeight;
use Filament\Tables;
use Filament\Tables\Table;

class ProfileResource extends Resource
{
    protected static ?string $model = Profile::class;

    protected static ?string $navigationIcon = 'hugeicons-profile-02';

    public static function getNavigationGroup(): ?string
    {
        return __('general.navigation.profiles'); // TODO: Change the autogenerated stub
    }

    public static function getNavigationLabel(): string
    {
        return __('general.navigation.profiles'); // TODO: Change the autogenerated stub
    }

    public static function getPluralModelLabel(): string
    {
        return __('general.navigation.profiles'); // TODO: Change the autogenerated stub
    }

    public static function getModelLabel(): string
    {
        return __('general.navigation.profiles'); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Select::make('user_id')
                    ->relationship('user', 'name')
                    ->required(),
                Forms\Components\TextInput::make('fullname')
                    ->maxLength(255),
                Forms\Components\TextInput::make('username')
                    ->maxLength(255),
                Forms\Components\TextInput::make('email')
                    ->email()
                    ->maxLength(255),
                Forms\Components\TextInput::make('phone')
                    ->tel()
                    ->maxLength(255),
                Forms\Components\TextInput::make('avatar')
                    ->maxLength(255),
                Forms\Components\TextInput::make('position')
                    ->maxLength(255),
                Forms\Components\Textarea::make('bio')
                    ->columnSpanFull(),
                Forms\Components\TextInput::make('gender')
                    ->maxLength(255),
                Forms\Components\DatePicker::make('dob'),
                Forms\Components\TextInput::make('video')
                    ->maxLength(255),
                Forms\Components\TextInput::make('country_id')
                    ->numeric(),
                Forms\Components\TextInput::make('province_id')
                    ->numeric(),
                Forms\Components\TextInput::make('state_id')
                    ->numeric(),
                Forms\Components\TextInput::make('address')
                    ->maxLength(255),
                Forms\Components\TextInput::make('company')
                    ->maxLength(255),
                Forms\Components\TextInput::make('website')
                    ->maxLength(255),
                Forms\Components\TextInput::make('skills'),
                Forms\Components\TextInput::make('languages'),
                Forms\Components\TextInput::make('tools'),
                Forms\Components\TextInput::make('categories'),
                Forms\Components\TextInput::make('interested'),
                Forms\Components\TextInput::make('social_facebook')
                    ->maxLength(255),
                Forms\Components\TextInput::make('social_x')
                    ->maxLength(255),
                Forms\Components\TextInput::make('social_linkedin')
                    ->maxLength(255),
                Forms\Components\TextInput::make('social_github')
                    ->maxLength(255),
                Forms\Components\TextInput::make('social_stackoverflow')
                    ->maxLength(255),
                Forms\Components\TextInput::make('social_youtube')
                    ->maxLength(255),
                Forms\Components\TextInput::make('social_instagram')
                    ->maxLength(255),
                Forms\Components\TextInput::make('social_pinterest')
                    ->maxLength(255),
                Forms\Components\TextInput::make('social_whatsapp')
                    ->maxLength(255),
                Forms\Components\Toggle::make('status')
                    ->required(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\Layout\Stack::make([
                    Tables\Columns\ImageColumn::make('avatar')
                        ->height('100%')
                        ->width('100%'),
                    Tables\Columns\Layout\Stack::make([
                        Tables\Columns\TextColumn::make('fullname')
                            ->weight(FontWeight::Bold),
                    ]),
                ])->space(3),
            ])
            ->filters([
                //
            ])
            ->contentGrid([
                'md' => 2,
                'xl' => 3,
            ])
            ->paginated([
                18,
                36,
                72,
                'all',
            ])
            ->actions([
                Tables\Actions\Action::make('visit')
                    ->label(__('general.visit'))
                    ->icon('heroicon-m-arrow-top-right-on-square')
                    ->color('gray')
                    ->url(fn (Profile $record) => route('profile.index', $record))
                    ->openUrlInNewTab(),
                Tables\Actions\EditAction::make(),
                Tables\Actions\ViewAction::make(),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('profile')
                    ->relationship('profile', 'fullname')
                    ->searchable(),
                Tables\Filters\SelectFilter::make('status')
                    ->options(Status::class),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist->schema([
            Section::make()->schema([
                TextEntry::make('user.name')
                    ->label(__('general.user')),
                TextEntry::make('fullname')
                    ->label(__('general.fullname')),
                TextEntry::make('username')
                    ->label(__('general.username')),
                TextEntry::make('employer')
                    ->label(__('general.basic-information.employer_name'))
                    ->formatStateUsing(function ($state) {
                        return Employer::where('id', $state)->first()?->name;
                    })
                    ->visible(fn ($record) => $record->employer_category != 'job_seekers' || $record->employer_category != 'entrepreneurship')
                    ->badge(),
                TextEntry::make('employer_category')
                    ->label(__('general.basic-information.employer'))
                    ->formatStateUsing(function ($state) {
                        return match ($state) {
                            'government_institutions' => __('general.employer.categories.government_institutions'),
                            'government_companies' => __('general.employer.categories.government_companies'),
                            'private_sector' => __('general.employer.categories.private_sector'),
                            'entrepreneurship' => __('general.employer.categories.entrepreneurship'),
                            'job_seekers' => __('general.employer.categories.job_seekers'),
                            default => $state,
                        };
                    })
                    ->badge(),
                TextEntry::make('email')
                    ->label(__('general.email')),
                TextEntry::make('phone')
                    ->label(__('general.phone')),
                ImageEntry::make('avatar')
                    ->label(__('general.avatar')),
                TextEntry::make('position')
                    ->label(__('general.position')),
                TextEntry::make('bio')
                    ->label(__('general.bio'))
                    ->columnSpanFull(),
                TextEntry::make('dob')
                    ->label(__('general.dob')),
                TextEntry::make('gender')
                    ->label(__('general.gender')),
                TextEntry::make('experienceLevel.name')
                    ->label(__('general.experience_level')),
                TextEntry::make('country.name')
                    ->label(__('general.country')),
                TextEntry::make('nationality.name')
                    ->label(__('general.nationality')),
                TextEntry::make('province.name')
                    ->label(__('general.province')),
                TextEntry::make('state.name')
                    ->label(__('general.state')),
                TextEntry::make('address')
                    ->label(__('general.address')),
                TextEntry::make('company')
                    ->label(__('general.company')),
                TextEntry::make('website')
                    ->label(__('general.website')),
                TextEntry::make('skills')
                    ->label(__('general.skills')),
                TextEntry::make('languages')
                    ->label(__('general.languages')),
                TextEntry::make('tools')
                    ->label(__('general.tools')),
                TextEntry::make('categories')
                    ->label(__('general.categories')),
                TextEntry::make('interested')
                    ->label(__('general.interested')),
                TextEntry::make('social_facebook')
                    ->label('Facebook'),
                TextEntry::make('social_x')
                    ->label('X'),
                TextEntry::make('social_linkedin')
                    ->label('LinkedIn'),
                TextEntry::make('social_github')
                    ->label('GitHub'),
                TextEntry::make('social_stackoverflow')
                    ->label('Stack Overflow'),
                TextEntry::make('social_youtube')
                    ->label('YouTube'),
                TextEntry::make('social_instagram')
                    ->label('Instagram'),
                TextEntry::make('social_pinterest')
                    ->label('Pinterest'),
                TextEntry::make('social_whatsapp')
                    ->label('WhatsApp'),
                TextEntry::make('status')
                    ->badge()
                    ->formatStateUsing(fn ($state) => $state ? __('general.active') : __('general.inactive'))
                    ->label(__('general.status')),
                TextEntry::make('public_profile')
                    ->badge()
                    ->formatStateUsing(fn ($state) => $state ? __('general.yes') : __('general.no'))
                    ->label(__('general.public_profile')),
                TextEntry::make('can_send_message')
                    ->badge()
                    ->formatStateUsing(fn ($state) => $state ? __('general.yes') : __('general.no'))
                    ->label(__('general.can_send_message')),
                TextEntry::make('show_email')
                    ->badge()
                    ->formatStateUsing(fn ($state) => $state ? __('general.yes') : __('general.no'))
                    ->label(__('general.show_email')),
                TextEntry::make('show_phone')
                    ->badge()
                    ->formatStateUsing(fn ($state) => $state ? __('general.yes') : __('general.no'))
                    ->label(__('general.show_phone')),
                TextEntry::make('show_location')
                    ->badge()
                    ->formatStateUsing(fn ($state) => $state ? __('general.yes') : __('general.no'))
                    ->label(__('general.show_location')),
                TextEntry::make('show_social_links')
                    ->badge()
                    ->formatStateUsing(fn ($state) => $state ? __('general.yes') : __('general.no'))
                    ->label(__('general.show_social_links')),
                TextEntry::make('show_rating')
                    ->badge()
                    ->formatStateUsing(fn ($state) => $state ? __('general.yes') : __('general.no'))
                    ->label(__('general.show_rating')),
                TextEntry::make('is_expert')
                    ->badge()
                    ->formatStateUsing(fn ($state) => $state ? __('general.yes') : __('general.no'))
                    ->label(__('general.is_expert')),
                TextEntry::make('international_profile')
                    ->badge()
                    ->formatStateUsing(fn ($state) => $state ? __('general.yes') : __('general.no'))
                    ->label(__('general.international_profile')),
                TextEntry::make('created_at')
                    ->dateTime()
                    ->label(__('general.created_at')),
                TextEntry::make('updated_at')
                    ->dateTime()
                    ->label(__('general.updated_at')),
            ])->columns(3),
        ]); // TODO: Change the autogenerated stub
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListProfiles::route('/'),
            'create' => Pages\CreateProfile::route('/create'),
            'edit' => Pages\EditProfile::route('/{record}/edit'),
            'view' => Pages\ViewProfile::route('/{record}'),
        ];
    }
}
