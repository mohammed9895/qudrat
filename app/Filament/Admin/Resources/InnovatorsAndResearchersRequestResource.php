<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\InnovatorsAndResearchersRequestResource\Pages;
use App\Models\InnovatorsAndResearchersRequest;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;

class InnovatorsAndResearchersRequestResource extends Resource
{
    protected static ?string $model = InnovatorsAndResearchersRequest::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function getNavigationGroup(): ?string
    {
        return __('general.navigation.profiles'); // TODO: Change the autogenerated stub
    }

    public static function getNavigationLabel(): string
    {
        return __('general.innovators_and_researchers_requests'); // Innovators & Researchers Requests
    }

    public static function getPluralModelLabel(): string
    {
        return __('general.innovators_and_researchers_requests'); // Innovators & Researchers Requests
    }

    public static function getModelLabel(): string
    {
        return __('general.innovators_and_researchers_request'); // Innovator or Researcher Request
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('profile_id')
                    ->required()
                    ->label(__('general.profile')),
                Forms\Components\Textarea::make('reason')
                    ->required()
                    ->columnSpanFull(),
                Forms\Components\Textarea::make('attachments')
                    ->columnSpanFull(),
                Forms\Components\Textarea::make('message')
                    ->columnSpanFull(),
                Forms\Components\TextInput::make('status')
                    ->required()
                    ->numeric()
                    ->default(0),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('profile.fullname')
                    ->numeric()
                    ->label(__('general.profile'))
                    ->sortable(),
                Tables\Columns\TextColumn::make('status')
                    ->badge()
                    ->label(__('general.status'))
                    ->sortable(),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\ViewAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist->schema([
            Section::make('general.profile')
                ->heading(__('general.profile'))
                ->schema([
                    TextEntry::make('profile.fullname')
                        ->label(__('general.fullname'))
                        ->icon('heroicon-o-user')
                        ->hiddenLabel(),
                    TextEntry::make('profile.email')
                        ->label(__('general.email'))
                        ->icon('heroicon-o-envelope')
                        ->hiddenLabel(),
                    TextEntry::make('profile.phone')
                        ->label(__('general.phone'))
                        ->icon('heroicon-o-phone')
                        ->hiddenLabel(),
                    TextEntry::make('category.name')
                        ->badge()
                        ->label(__('general.category')),
                    TextEntry::make('status')
                        ->badge()
                        ->label(__('general.status')),
                ])->columns(2),
            Section::make(__('general.details'))
                ->schema([
                    TextEntry::make('reason')
                        ->html()
                        ->hiddenLabel()
                        ->label(__('general.reason')),
                ]),
            //            Section::make(__('general.attachments'))
            //                ->schema([
            //                    Actions::make([
            //                        Action::make('downloadAttachments')
            //                            ->label(__('general.download'))
            //                            ->icon('heroicon-o-arrow-down-tray')
            //                            ->action(function (ExpertRequest $record) {
            //                                if (empty($record->attachments) || ! is_array($record->attachments)) {
            //                                    return;
            //                                }
            //
            //                                $zipFileName = 'attachments_'.$record->id.'.zip';
            //                                $zipPath = storage_path("app/temp/$zipFileName");
            //
            //                                // Ensure the temp directory exists
            //                                if (! file_exists(dirname($zipPath))) {
            //                                    mkdir(dirname($zipPath), 0755, true);
            //                                }
            //
            //                                $zip = new ZipArchive;
            //                                $filesAdded = false;
            //
            //                                if ($zip->open($zipPath, ZipArchive::CREATE | ZipArchive::OVERWRITE) === true) {
            //                                    foreach ($record->attachments as $file) {
            //                                        $fullPath = Storage::disk('public')->path($file);
            //
            //                                        if (file_exists($fullPath)) {
            //                                            $zip->addFile($fullPath, basename($file));
            //                                            $filesAdded = true;
            //                                        }
            //                                    }
            //                                    $zip->close();
            //                                }
            //
            //                                if (! $filesAdded || ! file_exists($zipPath)) {
            //                                    throw new Exception('No valid files were found to add to the ZIP.');
            //                                }
            //
            //                                return response()->download($zipPath)->deleteFileAfterSend(true);
            //                            }),
            //                    ]),
            //                ]),
        ]); // TODO: Change the autogenerated stub
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListInnovatorsAndResearchersRequests::route('/'),
            'create' => Pages\CreateInnovatorsAndResearchersRequest::route('/create'),
            'edit' => Pages\EditInnovatorsAndResearchersRequest::route('/{record}/edit'),
            'view' => Pages\ViewInnovatorsAndResearchersRequest::route('/{record}'),
        ];
    }
}
